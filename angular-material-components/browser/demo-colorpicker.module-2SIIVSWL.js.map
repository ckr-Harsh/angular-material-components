{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/dialog.mjs","node_modules/@angular/material/fesm2022/module-BnDTus5c.mjs","projects/color-picker-v2/src/lib/helpers/color-helpers.ts","projects/color-picker-v2/src/lib/models/color.model.ts","projects/color-picker-v2/src/lib/components/color-canvas/base-color-canvas.ts","projects/color-picker-v2/src/lib/components/color-canvas/color-slider/color-slider.component.ts","projects/color-picker-v2/src/lib/components/color-canvas/color-slider/color-slider.component.html","projects/color-picker-v2/src/lib/directives/numeric-color-input.directive.ts","projects/color-picker-v2/src/lib/components/color-canvas/color-canvas.component.ts","projects/color-picker-v2/src/lib/components/color-canvas/color-canvas.component.html","projects/color-picker-v2/src/lib/components/color-collection/color-collection.component.ts","projects/color-picker-v2/src/lib/components/color-collection/color-collection.component.html","projects/color-picker-v2/src/lib/components/color-palette/color-palette.component.ts","projects/color-picker-v2/src/lib/components/color-palette/color-palette.component.html","projects/color-picker-v2/src/lib/services/color-adapter.ts","projects/color-picker-v2/src/lib/services/color-formats.ts","projects/color-picker-v2/src/lib/components/color-picker/color-picker.component.ts","projects/color-picker-v2/src/lib/components/color-picker/color-picker-content.component.html","projects/color-picker-v2/src/lib/components/color-picker/color-input.component.ts","projects/color-picker-v2/src/lib/components/color-toggle/color-toggle.component.ts","projects/color-picker-v2/src/lib/components/color-toggle/color-toggle.component.html","projects/color-picker-v2/src/lib/color-picker.module.ts","src/app/demo-colorpicker/demo-colorpicker.component.ts","src/app/demo-colorpicker/demo-colorpicker.component.html","src/app/demo-colorpicker/demo-colorpicker.module.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, Renderer2, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, InjectionToken, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport { Subject, defer, of } from 'rxjs';\nimport { B as BasePortalOutlet, f as CdkPortalOutlet, C as ComponentPortal, T as TemplatePortal, h as PortalModule } from './portal-directives-Bw5woq8I.mjs';\nfunction CdkDialogContainer_ng_template_0_Template(rf, ctx) {}\nexport { d as ɵɵCdkPortal, g as ɵɵPortalHostDirective, e as ɵɵTemplatePortalDirective } from './portal-directives-Bw5woq8I.mjs';\nimport { F as FocusTrapFactory, I as InteractivityChecker, A as A11yModule } from './a11y-module-BYox5gpI.mjs';\nimport { c as OverlayRef, a as Overlay, O as OverlayContainer, f as OverlayConfig, m as OverlayModule } from './overlay-module-BUj0D19H.mjs';\nimport { F as FocusMonitor } from './focus-monitor-e2l_RpN3.mjs';\nimport { P as Platform } from './platform-DmdVEw_C.mjs';\nimport { c as _getFocusedElementPierceShadowDom } from './shadow-dom-B0oHn41l.mjs';\nimport { g as ESCAPE } from './keycodes-CpHkExLC.mjs';\nimport { hasModifierKey } from './keycodes.mjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { _ as _IdGenerator } from './id-generator-Dw_9dSDu.mjs';\nimport { D as Directionality } from './directionality-CBXD4hga.mjs';\nimport './style-loader-Cu9AvjH9.mjs';\nimport './private.mjs';\nimport './breakpoints-observer-CljOfYGy.mjs';\nimport './array-I1yfCXUO.mjs';\nimport './observers.mjs';\nimport './element-x4z00URv.mjs';\nimport './backwards-compatibility-DHR38MsD.mjs';\nimport './test-environment-CT0XxPyp.mjs';\nimport './css-pixel-value-C_HEqLhI.mjs';\nimport './scrolling.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-DoWdPqVw.mjs';\nimport './data-source-D34wiQZj.mjs';\nimport './fake-event-detection-DWOdFTFz.mjs';\nimport './passive-listeners-esHZRgIN.mjs';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef;\n  /**\n   * Injector used for the instantiation of the component to be attached. If provided,\n   * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n   */\n  injector;\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id;\n  /** The ARIA role of the dialog element. */\n  role = 'dialog';\n  /** Optional CSS class or classes applied to the overlay panel. */\n  panelClass = '';\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop = true;\n  /** Optional CSS class or classes applied to the overlay backdrop. */\n  backdropClass = '';\n  /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n  disableClose = false;\n  /** Width of the dialog. */\n  width = '';\n  /** Height of the dialog. */\n  height = '';\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth;\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight;\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. */\n  maxWidth;\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight;\n  /** Strategy to use when positioning the dialog. Defaults to centering it on the page. */\n  positionStrategy;\n  /** Data being injected into the child component. */\n  data = null;\n  /** Layout direction for the dialog's content. */\n  direction;\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy = null;\n  /** Dialog label applied via `aria-label` */\n  ariaLabel = null;\n  /**\n   * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n   * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n   * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n   */\n  ariaModal = false;\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n  autoFocus = 'first-tabbable';\n  /**\n   * Whether the dialog should restore focus to the previously-focused element upon closing.\n   * Has the following behavior based on the type that is passed in:\n   * - `boolean` - when true, will return focus to the element that was focused before the dialog\n   *    was opened, otherwise won't restore focus at all.\n   * - `string` - focus will be restored to the first element that matches the CSS selector.\n   * - `HTMLElement` - focus will be restored to the specific element.\n   */\n  restoreFocus = true;\n  /**\n   * Scroll strategy to be used for the dialog. This determines how\n   * the dialog responds to scrolling underneath the panel element.\n   */\n  scrollStrategy;\n  /**\n   * Whether the dialog should close when the user navigates backwards or forwards through browser\n   * history. This does not apply to navigation via anchor element unless using URL-hash based\n   * routing (`HashLocationStrategy` in the Angular router).\n   */\n  closeOnNavigation = true;\n  /**\n   * Whether the dialog should close when the dialog service is destroyed. This is useful if\n   * another service is wrapping the dialog and is managing the destruction instead.\n   */\n  closeOnDestroy = true;\n  /**\n   * Whether the dialog should close when the underlying overlay is detached. This is useful if\n   * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n   * external detachment can happen as a result of a scroll strategy triggering it or when the\n   * browser location changes.\n   */\n  closeOnOverlayDetachments = true;\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * @deprecated No longer used. Will be removed.\n   * @breaking-change 20.0.0\n   */\n  componentFactoryResolver;\n  /**\n   * Providers that will be exposed to the contents of the dialog. Can also\n   * be provided as a function in order to generate the providers lazily.\n   */\n  providers;\n  /**\n   * Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.\n   * A configuration object can be passed in to customize the providers that will be exposed\n   * to the dialog container.\n   */\n  container;\n  /**\n   * Context that will be passed to template-based dialogs.\n   * A function can be passed in to resolve the context lazily.\n   */\n  templateContext;\n}\nfunction throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n  _elementRef = inject(ElementRef);\n  _focusTrapFactory = inject(FocusTrapFactory);\n  _config;\n  _interactivityChecker = inject(InteractivityChecker);\n  _ngZone = inject(NgZone);\n  _overlayRef = inject(OverlayRef);\n  _focusMonitor = inject(FocusMonitor);\n  _renderer = inject(Renderer2);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _injector = inject(Injector);\n  _platform = inject(Platform);\n  _document = inject(DOCUMENT, {\n    optional: true\n  });\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  _portalOutlet;\n  _focusTrapped = new Subject();\n  /** The class that traps and manages focus within the dialog. */\n  _focusTrap = null;\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  _elementFocusedBeforeDialogWasOpened = null;\n  /**\n   * Type of interaction that led to the dialog being closed. This is used to determine\n   * whether the focus style will be applied when returning focus to its original location\n   * after the dialog is closed.\n   */\n  _closeInteractionType = null;\n  /**\n   * Queue of the IDs of the dialog's label element, based on their definition order. The first\n   * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n   * where there are two or more titles in the DOM at a time and the first one is destroyed while\n   * the rest are present.\n   */\n  _ariaLabelledByQueue = [];\n  _isDestroyed = false;\n  constructor() {\n    super();\n    // Callback is primarily for some internal tests\n    // that were instantiating the dialog container manually.\n    this._config = inject(DialogConfig, {\n      optional: true\n    }) || new DialogConfig();\n    if (this._config.ariaLabelledBy) {\n      this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n    }\n  }\n  _addAriaLabelledBy(id) {\n    this._ariaLabelledByQueue.push(id);\n    this._changeDetectorRef.markForCheck();\n  }\n  _removeAriaLabelledBy(id) {\n    const index = this._ariaLabelledByQueue.indexOf(id);\n    if (index > -1) {\n      this._ariaLabelledByQueue.splice(index, 1);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  _contentAttached() {\n    this._initializeFocusTrap();\n    this._handleBackdropClicks();\n    this._captureInitialFocus();\n  }\n  /**\n   * Can be used by child classes to customize the initial focus\n   * capturing behavior (e.g. if it's tied to an animation).\n   */\n  _captureInitialFocus() {\n    this._trapFocus();\n  }\n  ngOnDestroy() {\n    this._focusTrapped.complete();\n    this._isDestroyed = true;\n    this._restoreFocus();\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n    const result = this._portalOutlet.attachComponentPortal(portal);\n    this._contentAttached();\n    return result;\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n    this._contentAttached();\n    return result;\n  }\n  /**\n   * Attaches a DOM portal to the dialog container.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = portal => {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n    const result = this._portalOutlet.attachDomPortal(portal);\n    this._contentAttached();\n    return result;\n  };\n  // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n  /** Captures focus if it isn't already inside the dialog. */\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n  _forceFocus(element, options) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1;\n      // The tabindex attribute should be removed to avoid navigating to that element again\n      this._ngZone.runOutsideAngular(() => {\n        const callback = () => {\n          deregisterBlur();\n          deregisterMousedown();\n          element.removeAttribute('tabindex');\n        };\n        const deregisterBlur = this._renderer.listen(element, 'blur', callback);\n        const deregisterMousedown = this._renderer.listen(element, 'mousedown', callback);\n      });\n    }\n    element.focus(options);\n  }\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n  _focusByCssSelector(selector, options) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n  /**\n   * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n   * cannot be moved then focus will go to the dialog container.\n   */\n  _trapFocus(options) {\n    if (this._isDestroyed) {\n      return;\n    }\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait until after the next render.\n    afterNextRender(() => {\n      const element = this._elementRef.nativeElement;\n      switch (this._config.autoFocus) {\n        case false:\n        case 'dialog':\n          // Ensure that focus is on the dialog container. It's possible that a different\n          // component tried to move focus while the open animation was running. See:\n          // https://github.com/angular/components/issues/16215. Note that we only want to do this\n          // if the focus isn't inside the dialog already, because it's possible that the consumer\n          // turned off `autoFocus` in order to move focus themselves.\n          if (!this._containsFocus()) {\n            element.focus(options);\n          }\n          break;\n        case true:\n        case 'first-tabbable':\n          const focusedSuccessfully = this._focusTrap?.focusInitialElement(options);\n          // If we weren't able to find a focusable element in the dialog, then focus the dialog\n          // container instead.\n          if (!focusedSuccessfully) {\n            this._focusDialogContainer(options);\n          }\n          break;\n        case 'first-heading':\n          this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]', options);\n          break;\n        default:\n          this._focusByCssSelector(this._config.autoFocus, options);\n          break;\n      }\n      this._focusTrapped.next();\n    }, {\n      injector: this._injector\n    });\n  }\n  /** Restores focus to the element that was focused before the dialog opened. */\n  _restoreFocus() {\n    const focusConfig = this._config.restoreFocus;\n    let focusTargetElement = null;\n    if (typeof focusConfig === 'string') {\n      focusTargetElement = this._document.querySelector(focusConfig);\n    } else if (typeof focusConfig === 'boolean') {\n      focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n    } else if (focusConfig) {\n      focusTargetElement = focusConfig;\n    }\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && focusTargetElement && typeof focusTargetElement.focus === 'function') {\n      const activeElement = _getFocusedElementPierceShadowDom();\n      const element = this._elementRef.nativeElement;\n      // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n      if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n          this._closeInteractionType = null;\n        } else {\n          focusTargetElement.focus();\n        }\n      }\n    }\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /** Focuses the dialog container. */\n  _focusDialogContainer(options) {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus(options);\n    }\n  }\n  /** Returns whether focus is inside the dialog. */\n  _containsFocus() {\n    const element = this._elementRef.nativeElement;\n    const activeElement = _getFocusedElementPierceShadowDom();\n    return element === activeElement || element.contains(activeElement);\n  }\n  /** Sets up the focus trap. */\n  _initializeFocusTrap() {\n    if (this._platform.isBrowser) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n      }\n    }\n  }\n  /** Sets up the listener that handles clicks on the dialog backdrop. */\n  _handleBackdropClicks() {\n    // Clicking on the backdrop will move focus out of dialog.\n    // Recapture it if closing via the backdrop is disabled.\n    this._overlayRef.backdropClick().subscribe(() => {\n      if (this._config.disableClose) {\n        this._recaptureFocus();\n      }\n    });\n  }\n  static ɵfac = function CdkDialogContainer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkDialogContainer)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkDialogContainer,\n    selectors: [[\"cdk-dialog-container\"]],\n    viewQuery: function CdkDialogContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", 1, \"cdk-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function CdkDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx._config.id || null)(\"role\", ctx._config.role)(\"aria-modal\", ctx._config.ariaModal)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledByQueue[0])(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function CdkDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CdkDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    dependencies: [CdkPortalOutlet],\n    styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      imports: [CdkPortalOutlet],\n      host: {\n        'class': 'cdk-dialog-container',\n        'tabindex': '-1',\n        '[attr.id]': '_config.id || null',\n        '[attr.role]': '_config.role',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null'\n      },\n      template: \"<ng-template cdkPortalOutlet />\\n\",\n      styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"]\n    }]\n  }], () => [], {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n  overlayRef;\n  config;\n  /**\n   * Instance of component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  componentInstance;\n  /**\n   * `ComponentRef` of the component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  componentRef;\n  /** Instance of the container that is rendering out the dialog content. */\n  containerInstance;\n  /** Whether the user is allowed to close the dialog. */\n  disableClose;\n  /** Emits when the dialog has been closed. */\n  closed = new Subject();\n  /** Emits when the backdrop of the dialog is clicked. */\n  backdropClick;\n  /** Emits when on keyboard events within the dialog. */\n  keydownEvents;\n  /** Emits on pointer events that happen outside of the dialog. */\n  outsidePointerEvents;\n  /** Unique ID for the dialog. */\n  id;\n  /** Subscription to external detachments of the dialog. */\n  _detachSubscription;\n  constructor(overlayRef, config) {\n    this.overlayRef = overlayRef;\n    this.config = config;\n    this.disableClose = config.disableClose;\n    this.backdropClick = overlayRef.backdropClick();\n    this.keydownEvents = overlayRef.keydownEvents();\n    this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n    this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n    this.keydownEvents.subscribe(event => {\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.close(undefined, {\n          focusOrigin: 'keyboard'\n        });\n      }\n    });\n    this.backdropClick.subscribe(() => {\n      if (!this.disableClose) {\n        this.close(undefined, {\n          focusOrigin: 'mouse'\n        });\n      }\n    });\n    this._detachSubscription = overlayRef.detachments().subscribe(() => {\n      // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n      if (config.closeOnOverlayDetachments !== false) {\n        this.close();\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param result Optional result to return to the dialog opener.\n   * @param options Additional options to customize the closing behavior.\n   */\n  close(result, options) {\n    if (this.containerInstance) {\n      const closedSubject = this.closed;\n      this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n      // Drop the detach subscription first since it can be triggered by the\n      // `dispose` call and override the result of this closing sequence.\n      this._detachSubscription.unsubscribe();\n      this.overlayRef.dispose();\n      closedSubject.next(result);\n      closedSubject.complete();\n      this.componentInstance = this.containerInstance = null;\n    }\n  }\n  /** Updates the position of the dialog based on the current position strategy. */\n  updatePosition() {\n    this.overlayRef.updatePosition();\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width = '', height = '') {\n    this.overlayRef.updateSize({\n      width,\n      height\n    });\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes) {\n    this.overlayRef.addPanelClass(classes);\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes) {\n    this.overlayRef.removePanelClass(classes);\n    return this;\n  }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n  providedIn: 'root',\n  factory: () => {\n    const overlay = inject(Overlay);\n    return () => overlay.scrollStrategies.block();\n  }\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\nclass Dialog {\n  _overlay = inject(Overlay);\n  _injector = inject(Injector);\n  _defaultOptions = inject(DEFAULT_DIALOG_CONFIG, {\n    optional: true\n  });\n  _parentDialog = inject(Dialog, {\n    optional: true,\n    skipSelf: true\n  });\n  _overlayContainer = inject(OverlayContainer);\n  _idGenerator = inject(_IdGenerator);\n  _openDialogsAtThisLevel = [];\n  _afterAllClosedAtThisLevel = new Subject();\n  _afterOpenedAtThisLevel = new Subject();\n  _ariaHiddenElements = new Map();\n  _scrollStrategy = inject(DIALOG_SCROLL_STRATEGY);\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n  constructor() {}\n  open(componentOrTemplateRef, config) {\n    const defaults = this._defaultOptions || new DialogConfig();\n    config = {\n      ...defaults,\n      ...config\n    };\n    config.id = config.id || this._idGenerator.getId('cdk-dialog-');\n    if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n    const overlayConfig = this._getOverlayConfig(config);\n    const overlayRef = this._overlay.create(overlayConfig);\n    const dialogRef = new DialogRef(overlayRef, config);\n    const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n    dialogRef.containerInstance = dialogContainer;\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      // Resolve this ahead of time, because some internal apps\n      // mock it out and depend on it being synchronous.\n      const overlayContainer = this._overlayContainer.getContainerElement();\n      if (dialogContainer._focusTrapped) {\n        dialogContainer._focusTrapped.pipe(take(1)).subscribe(() => {\n          this._hideNonDialogContentFromAssistiveTechnology(overlayContainer);\n        });\n      } else {\n        this._hideNonDialogContentFromAssistiveTechnology(overlayContainer);\n      }\n    }\n    this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n    this.openDialogs.push(dialogRef);\n    dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n    this.afterOpened.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll() {\n    reverseForEach(this.openDialogs, dialog => dialog.close());\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n  ngOnDestroy() {\n    // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n    // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n    // determines when `aria-hidden` is removed from elements outside the dialog.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => {\n      // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n      if (dialog.config.closeOnDestroy === false) {\n        this._removeOpenDialog(dialog, false);\n      }\n    });\n    // Make a second pass and close the remaining dialogs. We do this second pass in order to\n    // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n    // that should be closed and dialogs that should not.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n    this._openDialogsAtThisLevel = [];\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  _getOverlayConfig(config) {\n    const state = new OverlayConfig({\n      positionStrategy: config.positionStrategy || this._overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n      panelClass: config.panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight,\n      width: config.width,\n      height: config.height,\n      disposeOnNavigation: config.closeOnNavigation\n    });\n    if (config.backdropClass) {\n      state.backdropClass = config.backdropClass;\n    }\n    return state;\n  }\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  _attachContainer(overlay, dialogRef, config) {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers = [{\n      provide: DialogConfig,\n      useValue: config\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }, {\n      provide: OverlayRef,\n      useValue: overlay\n    }];\n    let containerType;\n    if (config.container) {\n      if (typeof config.container === 'function') {\n        containerType = config.container;\n      } else {\n        containerType = config.container.type;\n        providers.push(...config.container.providers(config));\n      }\n    } else {\n      containerType = CdkDialogContainer;\n    }\n    const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({\n      parent: userInjector || this._injector,\n      providers\n    }));\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param config Configuration used to open the dialog.\n   */\n  _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n      let context = {\n        $implicit: config.data,\n        dialogRef\n      };\n      if (config.templateContext) {\n        context = {\n          ...context,\n          ...(typeof config.templateContext === 'function' ? config.templateContext() : config.templateContext)\n        };\n      }\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n    } else {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n      dialogRef.componentRef = contentRef;\n      dialogRef.componentInstance = contentRef.instance;\n    }\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n   * dialog injector, if the user didn't provide a custom one.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers = [{\n      provide: DIALOG_DATA,\n      useValue: config.data\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }];\n    if (config.providers) {\n      if (typeof config.providers === 'function') {\n        providers.push(...config.providers(dialogRef, config, dialogContainer));\n      } else {\n        providers.push(...config.providers);\n      }\n    }\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null, {\n      optional: true\n    }))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {\n          value: config.direction,\n          change: of()\n        }\n      });\n    }\n    return Injector.create({\n      parent: userInjector || fallbackInjector,\n      providers\n    });\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   * @param emitEvent Whether to emit an event if this is the last dialog.\n   */\n  _removeOpenDialog(dialogRef, emitEvent) {\n    const index = this.openDialogs.indexOf(dialogRef);\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n        this._ariaHiddenElements.clear();\n        if (emitEvent) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n  }\n  /** Hides all of the content that isn't an overlay from assistive technology. */\n  _hideNonDialogContentFromAssistiveTechnology(overlayContainer) {\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n      for (let i = siblings.length - 1; i > -1; i--) {\n        const sibling = siblings[i];\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n  static ɵfac = function Dialog_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Dialog)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Dialog,\n    factory: Dialog.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Dialog, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n  let i = items.length;\n  while (i--) {\n    callback(items[i]);\n  }\n}\nclass DialogModule {\n  static ɵfac = function DialogModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DialogModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DialogModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [Dialog],\n    imports: [OverlayModule, PortalModule, A11yModule,\n    // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n    // don't have to remember to import it or be faced with an unhelpful error.\n    PortalModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n      exports: [\n      // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n      // don't have to remember to import it or be faced with an unhelpful error.\n      PortalModule, CdkDialogContainer],\n      providers: [Dialog]\n    }]\n  }], null, null);\n})();\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError, CdkPortalOutlet as ɵɵCdkPortalOutlet };\n","import { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { inject, ANIMATION_MODULE_TYPE, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, ElementRef, Directive, Input, NgModule } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { M as MatCommonModule } from './common-module-WayjW0Pb.mjs';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nfunction MatDialogContainer_ng_template_2_Template(rf, ctx) {}\nclass MatDialogConfig {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef;\n  /**\n   * Injector used for the instantiation of the component to be attached. If provided,\n   * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n   */\n  injector;\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id;\n  /** The ARIA role of the dialog element. */\n  role = 'dialog';\n  /** Custom class for the overlay pane. */\n  panelClass = '';\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop = true;\n  /** Custom class for the backdrop. */\n  backdropClass = '';\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose = false;\n  /** Width of the dialog. */\n  width = '';\n  /** Height of the dialog. */\n  height = '';\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth;\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight;\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. */\n  maxWidth;\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight;\n  /** Position overrides. */\n  position;\n  /** Data being injected into the child component. */\n  data = null;\n  /** Layout direction for the dialog's content. */\n  direction;\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy = null;\n  /** Aria label to assign to the dialog element. */\n  ariaLabel = null;\n  /**\n   * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n   * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n   * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n   */\n  ariaModal = false;\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n  autoFocus = 'first-tabbable';\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus = true;\n  /** Whether to wait for the opening animation to finish before trapping focus. */\n  delayFocusTrap = true;\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation = true;\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * @deprecated No longer used. Will be removed.\n   * @breaking-change 20.0.0\n   */\n  componentFactoryResolver;\n  /**\n   * Duration of the enter animation in ms.\n   * Should be a number, string type is deprecated.\n   * @breaking-change 17.0.0 Remove string signature.\n   */\n  enterAnimationDuration;\n  /**\n   * Duration of the exit animation in ms.\n   * Should be a number, string type is deprecated.\n   * @breaking-change 17.0.0 Remove string signature.\n   */\n  exitAnimationDuration;\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n  _animationMode = inject(ANIMATION_MODULE_TYPE, {\n    optional: true\n  });\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter();\n  /** Whether animations are enabled. */\n  _animationsEnabled = this._animationMode !== 'NoopAnimations';\n  /** Number of actions projected in the dialog. */\n  _actionSectionCount = 0;\n  /** Host element of the dialog container component. */\n  _hostElement = this._elementRef.nativeElement;\n  /** Duration of the dialog open animation. */\n  _enterAnimationDuration = this._animationsEnabled ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION : 0;\n  /** Duration of the dialog close animation. */\n  _exitAnimationDuration = this._animationsEnabled ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION : 0;\n  /** Current timer for dialog animations. */\n  _animationTimer = null;\n  _contentAttached() {\n    // Delegate to the original dialog-container initialization (i.e. saving the\n    // previous element, setting up the focus trap and moving focus to the container).\n    super._contentAttached();\n    // Note: Usually we would be able to use the MDC dialog foundation here to handle\n    // the dialog animation for us, but there are a few reasons why we just leverage\n    // their styles and not use the runtime foundation code:\n    //   1. Foundation does not allow us to disable animations.\n    //   2. Foundation contains unnecessary features we don't need and aren't\n    //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n    this._startOpenAnimation();\n  }\n  /** Starts the dialog open animation if enabled. */\n  _startOpenAnimation() {\n    this._animationStateChanged.emit({\n      state: 'opening',\n      totalTime: this._enterAnimationDuration\n    });\n    if (this._animationsEnabled) {\n      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n      // We need to give the `setProperty` call from above some time to be applied.\n      // One would expect that the open class is added once the animation finished, but MDC\n      // uses the open class in combination with the opening class to start the animation.\n      this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n      this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n    } else {\n      this._hostElement.classList.add(OPEN_CLASS);\n      // Note: We could immediately finish the dialog opening here with noop animations,\n      // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n      // Executing this immediately would mean that `afterOpened` emits synchronously\n      // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n      Promise.resolve().then(() => this._finishDialogOpen());\n    }\n  }\n  /**\n   * Starts the exit animation of the dialog if enabled. This method is\n   * called by the dialog ref.\n   */\n  _startExitAnimation() {\n    this._animationStateChanged.emit({\n      state: 'closing',\n      totalTime: this._exitAnimationDuration\n    });\n    this._hostElement.classList.remove(OPEN_CLASS);\n    if (this._animationsEnabled) {\n      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n      // We need to give the `setProperty` call from above some time to be applied.\n      this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n      this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n    } else {\n      // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n      // set up before any user can subscribe to the backdrop click. The subscription triggers\n      // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n      // animation state event if animations are disabled, the overlay would be disposed\n      // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n      // skipped. We work around this by waiting with the dialog close until the next tick when\n      // all subscriptions have been fired as expected. This is not an ideal solution, but\n      // there doesn't seem to be any other good way. Alternatives that have been considered:\n      //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n      //      Also this issue is specific to the MDC implementation where the dialog could\n      //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n      //      and closing always takes at least a tick.\n      //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n      //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n      //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n      // Based on the fact that this is specific to the MDC-based implementation of the dialog\n      // animations, the defer is applied here.\n      Promise.resolve().then(() => this._finishDialogClose());\n    }\n  }\n  /**\n   * Updates the number action sections.\n   * @param delta Increase/decrease in the number of sections.\n   */\n  _updateActionSectionCount(delta) {\n    this._actionSectionCount += delta;\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Completes the dialog open by clearing potential animation classes, trapping\n   * focus and emitting an opened event.\n   */\n  _finishDialogOpen = () => {\n    this._clearAnimationClasses();\n    this._openAnimationDone(this._enterAnimationDuration);\n  };\n  /**\n   * Completes the dialog close by clearing potential animation classes, restoring\n   * focus and emitting a closed event.\n   */\n  _finishDialogClose = () => {\n    this._clearAnimationClasses();\n    this._animationStateChanged.emit({\n      state: 'closed',\n      totalTime: this._exitAnimationDuration\n    });\n  };\n  /** Clears all dialog animation classes. */\n  _clearAnimationClasses() {\n    this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n  }\n  _waitForAnimationToComplete(duration, callback) {\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    }\n    // Note that we want this timer to run inside the NgZone, because we want\n    // the related events like `afterClosed` to be inside the zone as well.\n    this._animationTimer = setTimeout(callback, duration);\n  }\n  /** Runs a callback in `requestAnimationFrame`, if available. */\n  _requestAnimationFrame(callback) {\n    this._ngZone.runOutsideAngular(() => {\n      if (typeof requestAnimationFrame === 'function') {\n        requestAnimationFrame(callback);\n      } else {\n        callback();\n      }\n    });\n  }\n  _captureInitialFocus() {\n    if (!this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Callback for when the open dialog animation has finished. Intended to\n   * be called by sub-classes that use different animation implementations.\n   */\n  _openAnimationDone(totalTime) {\n    if (this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n    this._animationStateChanged.next({\n      state: 'opened',\n      totalTime\n    });\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    }\n  }\n  attachComponentPortal(portal) {\n    // When a component is passed into the dialog, the host element interrupts\n    // the `display:flex` from affecting the dialog title, content, and\n    // actions. To fix this, we make the component host `display: contents` by\n    // marking its host with the `mat-mdc-dialog-component-host` class.\n    //\n    // Note that this problem does not exist when a template ref is used since\n    // the title, contents, and actions are then nested directly under the\n    // dialog surface.\n    const ref = super.attachComponentPortal(portal);\n    ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n    return ref;\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatDialogContainer_BaseFactory;\n    return function MatDialogContainer_Factory(__ngFactoryType__) {\n      return (ɵMatDialogContainer_BaseFactory || (ɵMatDialogContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatDialogContainer)))(__ngFactoryType__ || MatDialogContainer);\n    };\n  })();\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-mdc-dialog-container\", \"mdc-dialog\"],\n    hostVars: 10,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx._config.id);\n        i0.ɵɵattribute(\"aria-modal\", ctx._config.ariaModal)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledByQueue[0])(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        i0.ɵɵclassProp(\"_mat-animation-noopable\", !ctx._animationsEnabled)(\"mat-mdc-dialog-container-with-actions\", ctx._actionSectionCount > 0);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"mat-mdc-dialog-inner-container\", \"mdc-dialog__container\"], [1, \"mat-mdc-dialog-surface\", \"mdc-dialog__surface\"], [\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtemplate(2, MatDialogContainer_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n        i0.ɵɵelementEnd()();\n      }\n    },\n    dependencies: [CdkPortalOutlet],\n    styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mdc-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      imports: [CdkPortalOutlet],\n      host: {\n        'class': 'mat-mdc-dialog-container mdc-dialog',\n        'tabindex': '-1',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[id]': '_config.id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[class._mat-animation-noopable]': '!_animationsEnabled',\n        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0'\n      },\n      template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\",\n      styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mdc-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\\n\"]\n    }]\n  }], null, null);\n})();\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n  if (time == null) {\n    return null;\n  }\n  if (typeof time === 'number') {\n    return time;\n  }\n  if (time.endsWith('ms')) {\n    return coerceNumberProperty(time.substring(0, time.length - 2));\n  }\n  if (time.endsWith('s')) {\n    return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n  }\n  if (time === '0') {\n    return 0;\n  }\n  return null; // anything else is invalid.\n}\nvar MatDialogState;\n(function (MatDialogState) {\n  MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n  MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n  MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n  _ref;\n  _containerInstance;\n  /** The instance of component opened into the dialog. */\n  componentInstance;\n  /**\n   * `ComponentRef` of the component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  componentRef;\n  /** Whether the user is allowed to close the dialog. */\n  disableClose;\n  /** Unique ID for the dialog. */\n  id;\n  /** Subject for notifying the user that the dialog has finished opening. */\n  _afterOpened = new Subject();\n  /** Subject for notifying the user that the dialog has started closing. */\n  _beforeClosed = new Subject();\n  /** Result to be passed to afterClosed. */\n  _result;\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  _closeFallbackTimeout;\n  /** Current state of the dialog. */\n  _state = MatDialogState.OPEN;\n  // TODO(crisbeto): we shouldn't have to declare this property, because `DialogRef.close`\n  // already has a second `options` parameter that we can use. The problem is that internal tests\n  // have assertions like `expect(MatDialogRef.close).toHaveBeenCalledWith(foo)` which will break,\n  // because it'll be called with two arguments by things like `MatDialogClose`.\n  /** Interaction that caused the dialog to close. */\n  _closeInteractionType;\n  constructor(_ref, config, _containerInstance) {\n    this._ref = _ref;\n    this._containerInstance = _containerInstance;\n    this.disableClose = config.disableClose;\n    this.id = _ref.id;\n    // Used to target panels specifically tied to dialogs.\n    _ref.addPanelClass('mat-mdc-dialog-panel');\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._finishDialogClose();\n    });\n    _ref.overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._finishDialogClose();\n    });\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n      if (!this.disableClose) {\n        event.preventDefault();\n        _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult) {\n    this._result = dialogResult;\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._ref.overlayRef.detachBackdrop();\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n    this._state = MatDialogState.CLOSING;\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed() {\n    return this._ref.closed;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick() {\n    return this._ref.backdropClick;\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents() {\n    return this._ref.keydownEvents;\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position) {\n    let strategy = this._ref.config.positionStrategy;\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n    this._ref.updatePosition();\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width = '', height = '') {\n    this._ref.updateSize(width, height);\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes) {\n    this._ref.addPanelClass(classes);\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes) {\n    this._ref.removePanelClass(classes);\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n  getState() {\n    return this._state;\n  }\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n  _finishDialogClose() {\n    this._state = MatDialogState.CLOSED;\n    this._ref.close(this._result, {\n      focusOrigin: this._closeInteractionType\n    });\n    this.componentInstance = null;\n  }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n  ref._closeInteractionType = interactionType;\n  return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const overlay = inject(Overlay);\n    return () => overlay.scrollStrategies.block();\n  }\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n  _overlay = inject(Overlay);\n  _defaultOptions = inject(MAT_DIALOG_DEFAULT_OPTIONS, {\n    optional: true\n  });\n  _scrollStrategy = inject(MAT_DIALOG_SCROLL_STRATEGY);\n  _parentDialog = inject(MatDialog, {\n    optional: true,\n    skipSelf: true\n  });\n  _idGenerator = inject(_IdGenerator);\n  _dialog = inject(Dialog);\n  _openDialogsAtThisLevel = [];\n  _afterAllClosedAtThisLevel = new Subject();\n  _afterOpenedAtThisLevel = new Subject();\n  dialogConfigClass = MatDialogConfig;\n  _dialogRefConstructor;\n  _dialogContainerType;\n  _dialogDataToken;\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n  constructor() {\n    this._dialogRefConstructor = MatDialogRef;\n    this._dialogContainerType = MatDialogContainer;\n    this._dialogDataToken = MAT_DIALOG_DATA;\n  }\n  open(componentOrTemplateRef, config) {\n    let dialogRef;\n    config = {\n      ...(this._defaultOptions || new MatDialogConfig()),\n      ...config\n    };\n    config.id = config.id || this._idGenerator.getId('mat-mdc-dialog-');\n    config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n    const cdkRef = this._dialog.open(componentOrTemplateRef, {\n      ...config,\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n      // Disable closing since we need to sync it up to the animation ourselves.\n      disableClose: true,\n      // Disable closing on destroy, because this service cleans up its open dialogs as well.\n      // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n      // the dialogs immediately whereas we want it to wait for the animations to finish.\n      closeOnDestroy: false,\n      // Disable closing on detachments so that we can sync up the animation.\n      // The Material dialog ref handles this manually.\n      closeOnOverlayDetachments: false,\n      container: {\n        type: this._dialogContainerType,\n        providers: () => [\n        // Provide our config as the CDK config as well since it has the same interface as the\n        // CDK one, but it contains the actual values passed in by the user for things like\n        // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n        {\n          provide: this.dialogConfigClass,\n          useValue: config\n        }, {\n          provide: DialogConfig,\n          useValue: config\n        }]\n      },\n      templateContext: () => ({\n        dialogRef\n      }),\n      providers: (ref, cdkConfig, dialogContainer) => {\n        dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n        dialogRef.updatePosition(config?.position);\n        return [{\n          provide: this._dialogContainerType,\n          useValue: dialogContainer\n        }, {\n          provide: this._dialogDataToken,\n          useValue: cdkConfig.data\n        }, {\n          provide: this._dialogRefConstructor,\n          useValue: dialogRef\n        }];\n      }\n    });\n    // This can't be assigned in the `providers` callback, because\n    // the instance hasn't been assigned to the CDK ref yet.\n    dialogRef.componentRef = cdkRef.componentRef;\n    dialogRef.componentInstance = cdkRef.componentInstance;\n    this.openDialogs.push(dialogRef);\n    this.afterOpened.next(dialogRef);\n    dialogRef.afterClosed().subscribe(() => {\n      const index = this.openDialogs.indexOf(dialogRef);\n      if (index > -1) {\n        this.openDialogs.splice(index, 1);\n        if (!this.openDialogs.length) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    });\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n  _closeDialogs(dialogs) {\n    let i = dialogs.length;\n    while (i--) {\n      dialogs[i].close();\n    }\n  }\n  static ɵfac = function MatDialog_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDialog)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: MatDialog.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n  dialogRef = inject(MatDialogRef, {\n    optional: true\n  });\n  _elementRef = inject(ElementRef);\n  _dialog = inject(MatDialog);\n  /** Screen-reader label for the button. */\n  ariaLabel;\n  /** Default to \"button\" to prevents accidental form submits. */\n  type = 'button';\n  /** Dialog close input. */\n  dialogResult;\n  _matDialogClose;\n  constructor() {}\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n  ngOnChanges(changes) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n  _onButtonClick(event) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n  static ɵfac = function MatDialogClose_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDialogClose)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n          return ctx._onButtonClick($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n      type: \"type\",\n      dialogResult: [0, \"mat-dialog-close\", \"dialogResult\"],\n      _matDialogClose: [0, \"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], () => [], {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\nclass MatDialogLayoutSection {\n  _dialogRef = inject(MatDialogRef, {\n    optional: true\n  });\n  _elementRef = inject(ElementRef);\n  _dialog = inject(MatDialog);\n  constructor() {}\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        this._onAdd();\n      });\n    }\n  }\n  ngOnDestroy() {\n    // Note: we null check because there are some internal\n    // tests that are mocking out `MatDialogRef` incorrectly.\n    const instance = this._dialogRef?._containerInstance;\n    if (instance) {\n      Promise.resolve().then(() => {\n        this._onRemove();\n      });\n    }\n  }\n  static ɵfac = function MatDialogLayoutSection_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDialogLayoutSection)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogLayoutSection\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogLayoutSection, [{\n    type: Directive\n  }], () => [], null);\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n  id = inject(_IdGenerator).getId('mat-mdc-dialog-title-');\n  _onAdd() {\n    // Note: we null check the queue, because there are some internal\n    // tests that are mocking out `MatDialogRef` incorrectly.\n    this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n  }\n  _onRemove() {\n    this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatDialogTitle_BaseFactory;\n    return function MatDialogTitle_Factory(__ngFactoryType__) {\n      return (ɵMatDialogTitle_BaseFactory || (ɵMatDialogTitle_BaseFactory = i0.ɵɵgetInheritedFactory(MatDialogTitle)))(__ngFactoryType__ || MatDialogTitle);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-dialog-title\", \"mdc-dialog__title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"],\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n        '[id]': 'id'\n      }\n    }]\n  }], null, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n  static ɵfac = function MatDialogContent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDialogContent)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-dialog-content\", \"mdc-dialog__content\"],\n    features: [i0.ɵɵHostDirectivesFeature([i1.CdkScrollable])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-mdc-dialog-content mdc-dialog__content'\n      },\n      hostDirectives: [CdkScrollable]\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n  /**\n   * Horizontal alignment of action buttons.\n   */\n  align;\n  _onAdd() {\n    this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n  }\n  _onRemove() {\n    this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n  }\n  static ɵfac = /* @__PURE__ */(() => {\n    let ɵMatDialogActions_BaseFactory;\n    return function MatDialogActions_Factory(__ngFactoryType__) {\n      return (ɵMatDialogActions_BaseFactory || (ɵMatDialogActions_BaseFactory = i0.ɵɵgetInheritedFactory(MatDialogActions)))(__ngFactoryType__ || MatDialogActions);\n    };\n  })();\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-dialog-actions\", \"mdc-dialog__actions\"],\n    hostVars: 6,\n    hostBindings: function MatDialogActions_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-mdc-dialog-actions-align-start\", ctx.align === \"start\")(\"mat-mdc-dialog-actions-align-center\", ctx.align === \"center\")(\"mat-mdc-dialog-actions-align-end\", ctx.align === \"end\");\n      }\n    },\n    inputs: {\n      align: \"align\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"'\n      }\n    }]\n  }], null, {\n    align: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n  while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n    parent = parent.parentElement;\n  }\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\nconst DIRECTIVES = [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];\nclass MatDialogModule {\n  static ɵfac = function MatDialogModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatDialogModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MatDialog],\n    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n      exports: [MatCommonModule, ...DIRECTIVES],\n      providers: [MatDialog]\n    }]\n  }], null, null);\n})();\nexport { MatDialogActions as M, _closeDialogVia as _, MatDialogClose as a, MatDialogTitle as b, MatDialogContent as c, MatDialogContainer as d, MAT_DIALOG_DATA as e, MAT_DIALOG_DEFAULT_OPTIONS as f, MAT_DIALOG_SCROLL_STRATEGY as g, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY as h, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER as i, MatDialog as j, MatDialogConfig as k, MatDialogState as l, MatDialogRef as m, MatDialogModule as n };\n","\r\nconst trimLeft = /^\\s+/;\r\nconst trimRight = /\\s+$/;\r\nconst tinyCounter = 0;\r\nconst mathRound = Math.round;\r\nconst mathMin = Math.min;\r\nconst mathMax = Math.max;\r\nconst mathRandom = Math.random;\r\n\r\nexport const NUMERIC_REGEX = /[^0-9]/g;\r\nexport const MAX_RGB = 255;\r\nexport const MIN_RGB = 0;\r\n\r\n\r\n/** List basic colors */\r\nexport const BASIC_COLORS = [\"#ffffff\", \"#ffff00\", \"#ff00ff\", \"#ff0000\",\r\n    \"#c0c0c0\", \"#808080\", \"#808000\", \"#800080\",\r\n    \"#800000\", \"#00ffff\", \"#00ff00\", \"#008080\",\r\n    \"#008000\", \"#0000ff\", \"#000080\", \"#000000\"\r\n];\r\n\r\n/**\r\n * Get color at position\r\n * @param ctx \r\n * @param x \r\n * @param y \r\n */\r\nexport function getColorAtPosition(ctx: CanvasRenderingContext2D, x: number, y: number): { r: number, g: number, b: number } {\r\n    const imageData: Uint8ClampedArray = ctx.getImageData(x, y, 1, 1).data;\r\n    return { r: imageData[0], g: imageData[1], b: imageData[2] };\r\n}\r\n\r\n// `rgbaToHex`\r\n// Converts an RGBA color plus alpha transparency to hex\r\n// Assumes r, g, b are contained in the set [0, 255] and\r\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\r\nexport function rgbaToHex(r: number, g: number, b: number, a: number, allow4Char?: boolean): string {\r\n    var hex = [\r\n        pad2(mathRound(r).toString(16)),\r\n        pad2(mathRound(g).toString(16)),\r\n        pad2(mathRound(b).toString(16)),\r\n        pad2(convertDecimalToHex(a))\r\n    ];\r\n\r\n    // Return a 4 character hex if possible\r\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\r\n    }\r\n\r\n    return hex.join(\"\");\r\n}\r\n\r\n// Force a hex value to have 2 characters\r\nexport function pad2(c): string {\r\n    return c.length == 1 ? '0' + c : '' + c;\r\n}\r\n\r\n// Converts a decimal to a hex value\r\nexport function convertDecimalToHex(d) {\r\n    return Math.round(parseFloat(d) * 255).toString(16);\r\n}\r\n\r\n// Converts a hex value to a decimal\r\nfunction convertHexToDecimal(h) {\r\n    return (parseIntFromHex(h) / 255);\r\n}\r\n\r\n// Parse a base-16 hex value into a base-10 integer\r\nfunction parseIntFromHex(val) {\r\n    return parseInt(val, 16);\r\n}\r\n\r\n// `rgbToHex`\r\n// Converts an RGB color to hex\r\n// Assumes r, g, and b are contained in the set [0, 255]\r\n// Returns a 3 or 6 character hex\r\nexport function rgbToHex(r: number, g: number, b: number, allow3Char?: boolean) {\r\n\r\n    var hex = [\r\n        pad2(mathRound(r).toString(16)),\r\n        pad2(mathRound(g).toString(16)),\r\n        pad2(mathRound(b).toString(16))\r\n    ];\r\n\r\n    // Return a 3 character hex if possible\r\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n    }\r\n\r\n    return hex.join(\"\");\r\n}\r\n\r\n// Actual matching.\r\n// Parentheses and commas are optional, but not required.\r\n// Whitespace can take the place of commas or opening parent\r\nconst CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\nconst CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\nconst CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\nconst PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\nconst PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\nexport const matchers = {\r\n    CSS_UNIT: new RegExp(CSS_UNIT),\r\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n    hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n};\r\n\r\n// `stringInputToObject`\r\n// Permissive string parsing.  Take in a number of formats, and output an object\r\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\nexport function stringInputToObject(color: string): { r: number, g: number, b: number, a: number } {\r\n\r\n    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\r\n\r\n    // Try to match string input using regular expressions.\r\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n    // Just return an object and let the conversion functions handle that.\r\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n    let match;\r\n    let obj;\r\n    if ((match = matchers.rgb.exec(color))) {\r\n        return { r: match[1], g: match[2], b: match[3], a: 1 };\r\n    }\r\n    if ((match = matchers.rgba.exec(color))) {\r\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n    }\r\n\r\n    if ((match = matchers.hex8.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            a: convertHexToDecimal(match[4]),\r\n        };\r\n    }\r\n    if ((match = matchers.hex6.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            a: 1\r\n        };\r\n    }\r\n    if ((match = matchers.hex4.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + '' + match[1]),\r\n            g: parseIntFromHex(match[2] + '' + match[2]),\r\n            b: parseIntFromHex(match[3] + '' + match[3]),\r\n            a: convertHexToDecimal(match[4] + '' + match[4]),\r\n        };\r\n    }\r\n    if ((match = matchers.hex3.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + '' + match[1]),\r\n            g: parseIntFromHex(match[2] + '' + match[2]),\r\n            b: parseIntFromHex(match[3] + '' + match[3]),\r\n            a: 1\r\n        };\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function createMissingDateImplError(provider: string) {\r\n    return Error(\r\n        `NgxMatColorPicker: No provider found for ${provider}. You must define MAT_COLOR_FORMATS in your module`);\r\n}","import { MAX_RGB, rgbaToHex, rgbToHex } from '../helpers';\r\nimport { ColorInputFormat } from './color-input-format';\r\n\r\nexport class Color {\r\n\r\n    public r: number;\r\n    public g: number;\r\n    public b: number;\r\n    public a: number;\r\n    public roundA: number;\r\n\r\n    public hex: string;\r\n    public rgba: string;\r\n\r\n    constructor(_r: number, _g: number, _b: number, _a?: number) {\r\n        this.r = _r > MAX_RGB ? MAX_RGB : _r;\r\n        this.g = _g > MAX_RGB ? MAX_RGB : _g;\r\n        this.b = _b > MAX_RGB ? MAX_RGB : _b;\r\n        if (_a != null) {\r\n            this.a = _a > 1 ? 1 : _a;\r\n        } else {\r\n            this.a = 1;\r\n        }\r\n        this.roundA = Math.round(this.a);\r\n        this.hex = rgbToHex(this.r, this.g, this.b);\r\n        this.rgba = this.toRgba();\r\n    }\r\n\r\n    public toHex(allow3Char?: boolean, ): string {\r\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\r\n    }\r\n\r\n    public toRgba(): string {\r\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`;\r\n    }\r\n\r\n    public toHexString(allow3Char?: boolean): string {\r\n        return '#' + this.toHex(allow3Char);\r\n    }\r\n\r\n    public toRgbString(): string {\r\n        return (this.a === 1) ?\r\n            \"rgb(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \")\" :\r\n            \"rgba(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \", \" + this.roundA + \")\";\r\n    }\r\n\r\n    public toHex8(allow4Char): string {\r\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\r\n    }\r\n\r\n    public toHex8String(allow4Char?: boolean): string {\r\n        return '#' + this.toHex8(allow4Char);\r\n    }\r\n\r\n    public toString(format: ColorInputFormat): string {\r\n        let formatSet = !!format;\r\n\r\n        let formattedString;\r\n        let hasAlpha = this.a < 1 && this.a >= 0;\r\n        let needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\"\r\n            || format === \"hex3\" || format === \"hex4\" || format === \"hex8\");\r\n\r\n        if (needsAlphaFormat) {\r\n            return this.toRgbString();\r\n        }\r\n        if (format === \"rgb\") {\r\n            formattedString = this.toRgbString();\r\n        }\r\n        if (format === \"hex\" || format === \"hex6\") {\r\n            formattedString = this.toHexString();\r\n        }\r\n        if (format === \"hex3\") {\r\n            formattedString = this.toHexString(true);\r\n        }\r\n        if (format === \"hex4\") {\r\n            formattedString = this.toHex8String(true);\r\n        }\r\n        if (format === \"hex8\") {\r\n            formattedString = this.toHex8String();\r\n        }\r\n\r\n        return formattedString || this.toHexString();\r\n    }\r\n\r\n}","import { AfterViewInit, Directive, EventEmitter, Input, NgZone, OnDestroy, Output } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Color } from '../../models';\r\n\r\n@Directive({\n    standalone: false\n})\r\nexport abstract class NgxMatBaseColorCanvas implements OnDestroy, AfterViewInit {\r\n\r\n\t@Output() colorChanged: EventEmitter<Color> = new EventEmitter<Color>();\r\n\t@Input() color: Color;\r\n\t@Input() theme: ThemePalette;\r\n\r\n\tcanvas: HTMLCanvasElement;\r\n\r\n\telementId: string;\r\n\r\n\tctx: CanvasRenderingContext2D;\r\n\twidth: number;\r\n\theight: number;\r\n\r\n\tx: number = 0;\r\n\ty: number = 0;\r\n\r\n\tdrag = false;\r\n\r\n\tprotected _destroyed: Subject<void> = new Subject<void>();\r\n\r\n\tconstructor(protected zone: NgZone, elementId: string) {\r\n\t\tthis.elementId = elementId;\r\n\t}\r\n\r\n\tngOnDestroy(): void {\r\n\t\tthis._destroyed.next();\r\n\t\tthis._destroyed.complete();\r\n\t}\r\n\r\n\tngAfterViewInit(): void {\r\n\t\tthis.canvas = <HTMLCanvasElement>document.getElementById(this.elementId);\r\n\t\tthis.ctx = this.canvas.getContext('2d');\r\n\t\tthis.width = this.canvas.width;\r\n\t\tthis.height = this.canvas.height;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\tprotected draw() {\r\n\t\tthis.ctx.clearRect(0, 0, this.width, this.height);\r\n\t\tthis.ctx.rect(0, 0, this.width, this.height);\r\n\t\tthis.fillGradient();\r\n\t\tif (this.y != 0) {\r\n\t\t\tthis.redrawIndicator(this.x, this.y);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic onMousedown(e: MouseEvent) {\r\n\t\tthis.drag = true;\r\n\t\tthis.changeColor(e);\r\n\r\n\t\tthis.zone.runOutsideAngular(() => {\r\n\t\t\tthis.canvas.addEventListener('mousemove', this.onMousemove.bind(this));\r\n\t\t})\r\n\t}\r\n\r\n\tpublic onMousemove(e: MouseEvent) {\r\n\t\tif (this.drag) {\r\n\t\t\tthis.zone.run(() => {\r\n\t\t\t\tthis.changeColor(e);\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onMouseup(e: MouseEvent) {\r\n\t\tthis.drag = false;\r\n\t\tthis.canvas.removeEventListener('mousemove', this.onMousemove);\r\n\t}\r\n\r\n\tpublic emitChange(color: Color) {\r\n\t\tthis.colorChanged.emit(color);\r\n\t}\r\n\r\n\tabstract changeColor(e: MouseEvent): void;\r\n\tabstract fillGradient(): void;\r\n\tabstract redrawIndicator(x: number, y: number): void;\r\n\r\n}\r\n","import { Component, OnInit, Output, EventEmitter, NgZone } from '@angular/core';\r\nimport { Color } from '../../../models';\r\nimport { getColorAtPosition } from '../../../helpers';\r\nimport { NgxMatBaseColorCanvas } from '../base-color-canvas';\r\n\r\n@Component({\n    selector: 'ngx-mat-color-slider',\n    templateUrl: './color-slider.component.html',\n    styleUrls: ['./color-slider.component.scss'],\n    standalone: false\n})\r\nexport class NgxMatColorSliderComponent extends NgxMatBaseColorCanvas implements OnInit {\r\n\r\n  constructor(protected zone: NgZone) {\r\n    super(zone,'color-strip');\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n  }\r\n\r\n  public fillGradient() {\r\n    const grd = this.ctx.createLinearGradient(0, 0, 0, this.height);\r\n    grd.addColorStop(0, 'rgba(255, 0, 0, 1)');\r\n    grd.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\r\n    grd.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\r\n    grd.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\r\n    grd.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\r\n    grd.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\r\n    grd.addColorStop(1, 'rgba(255, 0, 0, 1)');\r\n\r\n    this.ctx.fillStyle = grd;\r\n    this.ctx.fill();\r\n  }\r\n\r\n  public redrawIndicator(x: number, y: number) {\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = 'white';\r\n    this.ctx.lineWidth = 2;\r\n    this.ctx.arc(7.5, y, 7.5, 0, 2 * Math.PI, false);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n  }\r\n\r\n  public changeColor(e: MouseEvent) {\r\n    this.x = e.offsetX;\r\n    this.y = e.offsetY;\r\n    this.draw();\r\n    const { r, g, b } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\r\n    this.emitChange(new Color(r, g, b));\r\n  }\r\n\r\n\r\n}\r\n","<canvas id=\"color-strip\" class=\"zone-strip\" (mousedown)=\"onMousedown($event)\" (mouseup)=\"onMouseup($event)\"\r\n width=\"15\" height=\"234\"></canvas>","import { Directive, HostListener } from '@angular/core';\r\nimport { NUMERIC_REGEX } from '../helpers';\r\n\r\n@Directive({\n    selector: '[ngxMatNumericColorInput]',\n    standalone: false\n})\r\nexport class NumericColorInputDirective {\r\n\r\n  constructor() { }\r\n\r\n  @HostListener('input', ['$event'])\r\n  onInput($event: any) {\r\n    this._formatInput($event.target);\r\n  }\r\n\r\n  /**\r\n* Format input\r\n* @param input \r\n*/\r\n  private _formatInput(input: any) {\r\n    let val = Number(input.value.replace(NUMERIC_REGEX, ''));\r\n    val = isNaN(val) ? 0 : val;\r\n    input.value = val;\r\n  }\r\n\r\n}\r\n","import { AfterViewInit, Component, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { merge } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { getColorAtPosition, matchers, stringInputToObject } from '../../helpers';\r\nimport { Color } from '../../models';\r\nimport { NgxMatBaseColorCanvas } from './base-color-canvas';\r\n\r\nconst RADIUS_NOB = 5;\r\n\r\n@Component({\n    selector: 'ngx-mat-color-canvas',\n    templateUrl: './color-canvas.component.html',\n    styleUrls: ['./color-canvas.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'ngx-mat-color-canvas'\n    },\n    standalone: false\n})\r\nexport class NgxMatColorCanvasComponent extends NgxMatBaseColorCanvas\r\n  implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  private _baseColor: Color;\r\n\r\n  get rCtrl(): AbstractControl {\r\n    return this.formGroup.get('r');\r\n  }\r\n\r\n  get gCtrl(): AbstractControl {\r\n    return this.formGroup.get('g');\r\n  }\r\n\r\n  get bCtrl(): AbstractControl {\r\n    return this.formGroup.get('b');\r\n  }\r\n\r\n  get aCtrl(): AbstractControl {\r\n    return this.formGroup.get('a');\r\n  }\r\n\r\n  get hexCtrl(): AbstractControl {\r\n    return this.formGroup.get('hex');\r\n  }\r\n\r\n  _resetBaseColor = true;\r\n\r\n  formGroup: FormGroup;\r\n\r\n  rgba: string;\r\n\r\n  constructor(protected zone: NgZone) {\r\n    super(zone, 'color-block');\r\n    this.formGroup = new FormGroup({\r\n      r: new FormControl(null, [Validators.required]),\r\n      g: new FormControl(null, [Validators.required]),\r\n      b: new FormControl(null, [Validators.required]),\r\n      a: new FormControl(null, [Validators.required]),\r\n      hex: new FormControl(null, [Validators.required, Validators.pattern(matchers.hex6)]),\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    const rgbaCtrl$ = merge(this.rCtrl.valueChanges, this.gCtrl.valueChanges,\r\n      this.bCtrl.valueChanges, this.aCtrl.valueChanges);\r\n    rgbaCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400))\r\n      .subscribe(_ => {\r\n        const color = new Color(Number(this.rCtrl.value),\r\n          Number(this.gCtrl.value), Number(this.bCtrl.value), Number(this.aCtrl.value));\r\n        this.emitChange(color);\r\n      });\r\n\r\n    const hexCtrl$ = this.hexCtrl.valueChanges;\r\n    hexCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400), distinctUntilChanged())\r\n      .subscribe(hex => {\r\n        const obj = stringInputToObject(hex);\r\n        if (obj != null) {\r\n          const color = new Color(obj.r, obj.g, obj.b, obj.a);\r\n          this.emitChange(color);\r\n        }\r\n      })\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.color && changes.color.currentValue) {\r\n      this.updateForm(changes.color.currentValue);\r\n      if (this._resetBaseColor) {\r\n        this._baseColor = changes.color.currentValue;\r\n      }\r\n\r\n      this._resetBaseColor = true;\r\n\r\n      if (!changes.color.firstChange) {\r\n        this.draw();\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateForm(val: Color): void {\r\n    const config = { emitEvent: false };\r\n    this.rCtrl.setValue(val.r, config);\r\n    this.gCtrl.setValue(val.g, config);\r\n    this.bCtrl.setValue(val.b, config);\r\n    this.aCtrl.setValue(val.a, config);\r\n    this.hexCtrl.setValue(val.hex, config);\r\n  }\r\n\r\n  public redrawIndicator(x: number, y: number) {\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = 'white';\r\n    this.ctx.arc(x, y, RADIUS_NOB, 0, 2 * Math.PI, false);\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n  }\r\n\r\n  public fillGradient() {\r\n    this.ctx.fillStyle = this._baseColor ? this._baseColor.rgba : 'rgba(255,255,255,1)';\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n\r\n    const grdWhite = this.ctx.createLinearGradient(0, 0, this.width, 0);\r\n    grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\r\n    grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\r\n    this.ctx.fillStyle = grdWhite;\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n\r\n    const grdBlack = this.ctx.createLinearGradient(0, 0, 0, this.height);\r\n    grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\r\n    grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\r\n    this.ctx.fillStyle = grdBlack;\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  public onSliderColorChanged(c: Color) {\r\n    this._baseColor = c;\r\n    this.color = c;\r\n    this.fillGradient();\r\n    this.emitChange(c);\r\n  }\r\n\r\n  public changeColor(e: MouseEvent): void {\r\n    this.x = e.offsetX;\r\n    this.y = e.offsetY;\r\n    this._resetBaseColor = false;\r\n    this.draw();\r\n    const { r, g, b } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\r\n    this.emitChange(new Color(r, g, b));\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"formGroup\">\r\n    <div class=\"color-canvas-row\">\r\n        <div class=\"zone-canvas\">\r\n            <canvas id=\"color-block\" class=\"zone-block\" (mousedown)=\"onMousedown($event)\" (mouseup)=\"onMouseup($event)\"\r\n                width=\"200\" height=\"235\"></canvas>\r\n            <ngx-mat-color-slider (colorChanged)=\"onSliderColorChanged($event)\"></ngx-mat-color-slider>\r\n        </div>\r\n\r\n        <div class=\"zone-inputs\">\r\n            <mat-form-field [color]=\"theme\">\r\n                <mat-label>R</mat-label>\r\n                <input matInput formControlName=\"r\" ngxMatNumericColorInput autocomplete=\"off\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field [color]=\"theme\">\r\n                <mat-label>G</mat-label>\r\n                <input matInput formControlName=\"g\" ngxMatNumericColorInput autocomplete=\"off\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field [color]=\"theme\">\r\n                <mat-label>B</mat-label>\r\n                <input matInput formControlName=\"b\" ngxMatNumericColorInput autocomplete=\"off\">\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"color-canvas-row\">\r\n        <button mat-mini-fab [style.background-color]=\"color?.rgba || 'transparent'\" class=\"preview\"></button>\r\n        <mat-form-field [color]=\"theme\">\r\n            <mat-label>HEX6</mat-label>\r\n            <mat-label matPrefix class=\"symbol\">#&nbsp;</mat-label>\r\n            <input matInput formControlName=\"hex\" autocomplete=\"off\">\r\n        </mat-form-field>\r\n        <mat-form-field class=\"input-opacity\" [color]=\"theme\">\r\n            <mat-label>A</mat-label>\r\n            <input matInput formControlName=\"a\" type=\"number\" min=\"0\" max=\"1\" step=\"0.1\" autocomplete=\"off\">\r\n        </mat-form-field>\r\n    </div>\r\n</form>","import { Component, EventEmitter, OnInit, Output, ViewEncapsulation, Input } from '@angular/core';\r\nimport { Color } from '../../models';\r\nimport { BASIC_COLORS, stringInputToObject } from '../../helpers';\r\n\r\n@Component({\n    selector: 'ngx-mat-color-collection',\n    templateUrl: './color-collection.component.html',\n    styleUrls: ['./color-collection.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'ngx-mat-color-collection'\n    },\n    standalone: false\n})\r\nexport class NgxMatColorCollectionComponent implements OnInit {\r\n\r\n  @Output() colorChanged: EventEmitter<Color> = new EventEmitter<Color>();\r\n\r\n  @Input()\r\n  set color(c: Color) {\r\n    if (c) {\r\n      this.selectedColor = c.toHexString();\r\n    }\r\n  }\r\n\r\n  selectedColor: string;\r\n\r\n  colors1: string[] = BASIC_COLORS.slice(0, 8);\r\n  colors2: string[] = BASIC_COLORS.slice(8, 16);\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  select(hex: string) {\r\n    this.selectedColor = hex;\r\n    const { r, g, b, a } = stringInputToObject(hex);\r\n    this.colorChanged.emit(new Color(r, g, b, a));\r\n  }\r\n\r\n}\r\n","<div class=\"color-collection-row\">\r\n  <button *ngFor=\"let c of colors1\" mat-mini-fab [style.background-color]=\"c\" class=\"btn-color\"\r\n    (click)=\"select(c)\" [ngClass]=\"{'active': selectedColor === c}\" [disableRipple]=\"true\">\r\n  </button>\r\n</div>\r\n<div class=\"color-collection-row\">\r\n  <button *ngFor=\"let c of colors2\" mat-mini-fab [style.background-color]=\"c\" class=\"btn-color\"\r\n    (click)=\"select(c)\" [ngClass]=\"{'active': selectedColor === c}\" [disableRipple]=\"true\">\r\n  </button>\r\n</div>","import { Component, OnInit, ViewEncapsulation, Output, EventEmitter, Input } from '@angular/core';\r\nimport { Color } from '../../models';\r\nimport { ThemePalette } from '@angular/material/core';\r\n\r\n@Component({\n    selector: 'ngx-mat-color-palette',\n    templateUrl: 'color-palette.component.html',\n    styleUrls: ['color-palette.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'ngx-mat-color-palette'\n    },\n    standalone: false\n})\r\nexport class NgxMatColorPaletteComponent implements OnInit {\r\n\r\n  @Output() colorChanged: EventEmitter<Color> = new EventEmitter<Color>();\r\n\r\n  @Input() color: Color;\r\n  @Input() theme: ThemePalette;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public handleColorChanged(color: Color) {\r\n    this.colorChanged.emit(color);\r\n  }\r\n\r\n}\r\n","<ngx-mat-color-canvas (colorChanged)=\"handleColorChanged($event)\" [color]=\"color\"\r\n  [theme]=\"theme\"></ngx-mat-color-canvas>\r\n\r\n<ngx-mat-color-collection (colorChanged)=\"handleColorChanged($event)\" [color]=\"color\">\r\n</ngx-mat-color-collection>","import { Injectable } from '@angular/core';\r\nimport { stringInputToObject } from '../helpers';\r\nimport { Color, ColorInputFormat } from '../models';\r\n\r\n@Injectable()\r\nexport class ColorAdapter {\r\n\r\n  constructor() { }\r\n\r\n  sameColor(a: Color, b: Color) {\r\n    if (a == null && b == null) return true;\r\n    if (a != null && b != null) return a.rgba === b.rgba;\r\n    return false;\r\n  }\r\n\r\n  format(c: Color, format: ColorInputFormat): string {\r\n    return c.toString(format);\r\n  }\r\n\r\n  parse(value: string): Color | null {\r\n    const obj = stringInputToObject(value);\r\n    if (obj) {\r\n      return new Color(obj.r, obj.g, obj.b, obj.a);\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { ColorInputFormat } from '../models';\r\n\r\nexport type MatColorFormats = {\r\n    display: {\r\n        colorInput: ColorInputFormat;\r\n    }\r\n}\r\n\r\nexport const NGX_MAT_COLOR_FORMATS: MatColorFormats = {\r\n    display: {\r\n        colorInput: 'hex'\r\n    }\r\n}\r\n\r\nexport const MAT_COLOR_FORMATS = new InjectionToken<MatColorFormats>('mat-color-formats');\r\n","import { Directionality } from \"@angular/cdk/bidi\";\r\nimport { coerceBooleanProperty } from \"@angular/cdk/coercion\";\r\nimport { ESCAPE, UP_ARROW } from \"@angular/cdk/keycodes\";\r\nimport {\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  PositionStrategy,\r\n  ScrollStrategy,\r\n} from \"@angular/cdk/overlay\";\r\nimport { ComponentPortal } from \"@angular/cdk/portal\";\r\nimport { DOCUMENT } from \"@angular/common\";\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ComponentRef,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from \"@angular/core\";\r\nimport { ThemePalette } from \"@angular/material/core\";\r\nimport { matDatepickerAnimations } from \"@angular/material/datepicker\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { Subject, Subscription, merge } from \"rxjs\";\r\nimport { filter, take } from \"rxjs/operators\";\r\nimport { Color } from \"../../models\";\r\nimport { ColorAdapter } from \"../../services\";\r\nimport { NgxMatColorPaletteComponent } from \"../color-palette/color-palette.component\";\r\nimport { NgxMatColorPickerInput } from \"./color-input.component\";\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY = new InjectionToken<\r\n  () => ScrollStrategy\r\n>(\"ngx-mat-colorpicker-scroll-strategy\");\r\n\r\nexport function NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY(\r\n  overlay: Overlay\r\n): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\nexport const NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n@Component({\r\n  selector: \"ngx-mat-color-picker-content\",\r\n  templateUrl: \"./color-picker-content.component.html\",\r\n  styleUrls: [\"color-picker-content.component.scss\"],\r\n  host: {\r\n    class: \"ngx-mat-colorpicker-content\",\r\n    \"[@transformPanel]\": '\"enter\"',\r\n    \"[class.ngx-mat-colorpicker-content-touch]\": \"picker.touchUi\",\r\n  },\r\n  animations: [\r\n    matDatepickerAnimations.transformPanel,\r\n    matDatepickerAnimations.fadeInCalendar,\r\n  ],\r\n  exportAs: \"ngxMatColorPickerContent\",\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: [\"color\"],\r\n  standalone: false,\r\n})\r\nexport class NgxMatColorPickerContentComponent {\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(NgxMatColorPaletteComponent) _palette: NgxMatColorPaletteComponent;\r\n\r\n  picker: NgxMatColorPickerComponent;\r\n  _isAbove: boolean;\r\n\r\n  constructor(elementRef: ElementRef) {}\r\n}\r\n\r\n@Component({\r\n  selector: \"ngx-mat-color-picker\",\r\n  template: \"\",\r\n  exportAs: \"ngxMatColorPicker\",\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  standalone: false,\r\n})\r\nexport class NgxMatColorPickerComponent implements OnInit, OnDestroy {\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output(\"opened\") openedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output(\"closed\") closedStream: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @Input() get disabled() {\r\n    return this._disabled === undefined && this._pickerInput\r\n      ? this._pickerInput.disabled\r\n      : !!this._disabled;\r\n  }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.next(newValue);\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  @Input()\r\n  get touchUi(): boolean {\r\n    return this._touchUi;\r\n  }\r\n  set touchUi(value: boolean) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean {\r\n    return this._opened;\r\n  }\r\n  set opened(value: boolean) {\r\n    value ? this.open() : this.close();\r\n  }\r\n  private _opened = false;\r\n\r\n  /** Default Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get defaultColor(): ThemePalette {\r\n    return this._defaultColor;\r\n  }\r\n  set defaultColor(value: ThemePalette) {\r\n    this._defaultColor = value;\r\n  }\r\n  _defaultColor: ThemePalette = \"primary\";\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return (\r\n      this._color ||\r\n      (this._pickerInput ? this._pickerInput.getThemePalette() : undefined)\r\n    );\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /** The currently selected date. */\r\n  get _selected(): Color {\r\n    return this._validSelected;\r\n  }\r\n  set _selected(value: Color) {\r\n    this._validSelected = value;\r\n  }\r\n  private _validSelected: Color = null;\r\n\r\n  _pickerInput: NgxMatColorPickerInput;\r\n  /** A reference to the overlay when the picker is opened as a popup. */\r\n  _popupRef: OverlayRef;\r\n\r\n  /** A reference to the dialog when the picker is opened as a dialog. */\r\n  private _dialogRef: MatDialogRef<NgxMatColorPickerContentComponent> | null;\r\n  /** Reference to the component instantiated in popup mode. */\r\n  private _popupComponentRef: ComponentRef<NgxMatColorPickerContentComponent> | null;\r\n  /** A portal containing the content for this picker. */\r\n  private _portal: ComponentPortal<NgxMatColorPickerContentComponent>;\r\n\r\n  /** Emits when the datepicker is disabled. */\r\n  readonly _disabledChange = new Subject<boolean>();\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Subscription to value changes in the associated input element. */\r\n  private _inputSubscription = Subscription.EMPTY;\r\n\r\n  /** Emits new selected date when selected date changes. */\r\n  readonly _selectedChanged = new Subject<Color>();\r\n\r\n  constructor(\r\n    private _dialog: MatDialog,\r\n    private _overlay: Overlay,\r\n    private _zone: NgZone,\r\n    private _adapter: ColorAdapter,\r\n    @Optional() private _dir: Directionality,\r\n    @Inject(NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY) scrollStrategy: any,\r\n    @Optional() @Inject(DOCUMENT) private _document: any,\r\n    private _viewContainerRef: ViewContainerRef\r\n  ) {\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n    this._inputSubscription.unsubscribe();\r\n    this._disabledChange.complete();\r\n\r\n    if (this._popupRef) {\r\n      this._popupRef.dispose();\r\n      this._popupComponentRef = null;\r\n    }\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(nextVal: Color): void {\r\n    let oldValue = this._selected;\r\n    this._selected = nextVal;\r\n    if (!this._adapter.sameColor(oldValue, this._selected)) {\r\n      this._selectedChanged.next(nextVal);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   */\r\n  registerInput(input: NgxMatColorPickerInput): void {\r\n    if (this._pickerInput) {\r\n      throw Error(\"A ColorPicker can only be associated with a single input.\");\r\n    }\r\n    this._pickerInput = input;\r\n    this._inputSubscription = this._pickerInput._valueChange.subscribe(\r\n      (value: Color) => (this._selected = value)\r\n    );\r\n  }\r\n\r\n  public open(): void {\r\n    if (this._opened || this.disabled) {\r\n      return;\r\n    }\r\n    if (!this._pickerInput) {\r\n      throw Error(\"Attempted to open an ColorPicker with no associated input.\");\r\n    }\r\n\r\n    if (this._document) {\r\n      this._focusedElementBeforeOpen = this._document.activeElement;\r\n    }\r\n\r\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Open the calendar as a dialog. */\r\n  private _openAsDialog(): void {\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n    }\r\n\r\n    this._dialogRef = this._dialog.open<NgxMatColorPickerContentComponent>(\r\n      NgxMatColorPickerContentComponent,\r\n      {\r\n        direction: this._dir ? this._dir.value : \"ltr\",\r\n        viewContainerRef: this._viewContainerRef,\r\n        panelClass: \"ngx-mat-colorpicker-dialog\",\r\n      }\r\n    );\r\n\r\n    this._dialogRef.afterClosed().subscribe(() => this.close());\r\n    this._dialogRef.componentInstance.picker = this;\r\n    this._setColor();\r\n  }\r\n\r\n  /** Open the calendar as a popup. */\r\n  private _openAsPopup(): void {\r\n    if (!this._portal) {\r\n      this._portal = new ComponentPortal<NgxMatColorPickerContentComponent>(\r\n        NgxMatColorPickerContentComponent,\r\n        this._viewContainerRef\r\n      );\r\n    }\r\n\r\n    if (!this._popupRef) {\r\n      this._createPopup();\r\n    }\r\n\r\n    if (!this._popupRef.hasAttached()) {\r\n      this._popupComponentRef = this._popupRef.attach(this._portal);\r\n      this._popupComponentRef.instance.picker = this;\r\n      this._setColor();\r\n\r\n      // Update the position once the calendar has rendered.\r\n      this._zone.onStable\r\n        .asObservable()\r\n        .pipe(take(1))\r\n        .subscribe(() => {\r\n          this._popupRef.updatePosition();\r\n        });\r\n    }\r\n  }\r\n\r\n  /** Create the popup. */\r\n  private _createPopup(): void {\r\n    const overlayConfig = new OverlayConfig({\r\n      positionStrategy: this._createPopupPositionStrategy(),\r\n      hasBackdrop: true,\r\n      backdropClass: \"mat-overlay-transparent-backdrop\",\r\n      direction: this._dir,\r\n      scrollStrategy: this._scrollStrategy(),\r\n      panelClass: \"mat-colorpicker-popup\",\r\n    });\r\n\r\n    this._popupRef = this._overlay.create(overlayConfig);\r\n    this._popupRef.overlayElement.setAttribute(\"role\", \"dialog\");\r\n\r\n    merge(\r\n      this._popupRef.backdropClick(),\r\n      this._popupRef.detachments(),\r\n      this._popupRef.keydownEvents().pipe(\r\n        filter((event) => {\r\n          // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n          return (\r\n            event.keyCode === ESCAPE ||\r\n            (this._pickerInput && event.altKey && event.keyCode === UP_ARROW)\r\n          );\r\n        })\r\n      )\r\n    ).subscribe((event) => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      this.close();\r\n    });\r\n  }\r\n\r\n  close(): void {\r\n    if (!this._opened) {\r\n      return;\r\n    }\r\n    if (this._popupRef && this._popupRef.hasAttached()) {\r\n      this._popupRef.detach();\r\n    }\r\n    if (this._dialogRef) {\r\n      this._dialogRef.close();\r\n      this._dialogRef = null;\r\n    }\r\n    if (this._portal && this._portal.isAttached) {\r\n      this._portal.detach();\r\n    }\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n        this._focusedElementBeforeOpen = null;\r\n      }\r\n    };\r\n\r\n    if (\r\n      this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === \"function\"\r\n    ) {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      this._focusedElementBeforeOpen.focus();\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Passes the current theme color along to the calendar overlay. */\r\n  private _setColor(): void {\r\n    const color = this.color;\r\n  }\r\n\r\n  /** Create the popup PositionStrategy. */\r\n  private _createPopupPositionStrategy(): PositionStrategy {\r\n    return this._overlay\r\n      .position()\r\n      .flexibleConnectedTo(this._pickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn(\".ngx-mat-colorpicker-content\")\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition()\r\n      .withPositions([\r\n        {\r\n          originX: \"start\",\r\n          originY: \"bottom\",\r\n          overlayX: \"start\",\r\n          overlayY: \"top\",\r\n        },\r\n        {\r\n          originX: \"start\",\r\n          originY: \"top\",\r\n          overlayX: \"start\",\r\n          overlayY: \"bottom\",\r\n        },\r\n        {\r\n          originX: \"end\",\r\n          originY: \"bottom\",\r\n          overlayX: \"end\",\r\n          overlayY: \"top\",\r\n        },\r\n        {\r\n          originX: \"end\",\r\n          originY: \"top\",\r\n          overlayX: \"end\",\r\n          overlayY: \"bottom\",\r\n        },\r\n      ]);\r\n  }\r\n}\r\n","<ngx-mat-color-palette\r\n  (colorChanged)=\"picker.select($event)\"\r\n  [color]=\"picker._selected\"\r\n></ngx-mat-color-palette>\r\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DOWN_ARROW } from '@angular/cdk/keycodes';\r\nimport { Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, Optional, Output } from '@angular/core';\r\nimport { AbstractControl, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { Subscription } from 'rxjs';\r\nimport { createMissingDateImplError } from '../../helpers';\r\nimport { Color } from '../../models';\r\nimport { ColorAdapter, MAT_COLOR_FORMATS, MatColorFormats } from '../../services';\r\nimport { NgxMatColorPickerComponent } from './color-picker.component';\r\n\r\nexport class NgxMatColorPickerInputEvent {\r\n  /** The new value for the target colorpicker input. */\r\n  value: Color | null;\r\n\r\n  constructor(\r\n    /** Reference to the colorpicker input component that emitted the event. */\r\n    public target: NgxMatColorPickerInput,\r\n    /** Reference to the native input element associated with the colorpicker input. */\r\n    public targetElement: HTMLElement) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n\r\nexport const MAT_COLORPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgxMatColorPickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const MAT_COLORPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => NgxMatColorPickerInput),\r\n  multi: true\r\n};\r\n\r\n@Directive({\n    selector: 'input[ngxMatColorPicker]',\n    providers: [\n        MAT_COLORPICKER_VALUE_ACCESSOR,\n        MAT_COLORPICKER_VALIDATORS,\n        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatColorPickerInput },\n    ],\n    host: {\n        '[attr.aria-haspopup]': '_picker ? \"dialog\" : null',\n        '[attr.aria-owns]': '(_picker?.opened && _picker.id) || null',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event.target.value)',\n        '(change)': '_onChange()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)',\n    },\n    exportAs: 'ngxMatColorPickerInput',\n    standalone: false\n})\r\nexport class NgxMatColorPickerInput implements ControlValueAccessor, OnInit, OnDestroy, Validator {\r\n\r\n  @Input()\r\n  set ngxMatColorPicker(value: NgxMatColorPickerComponent) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this._picker = value;\r\n    this._picker.registerInput(this);\r\n    this._pickerSubscription.unsubscribe();\r\n\r\n    this._pickerSubscription = this._picker._selectedChanged.subscribe((selected: Color) => {\r\n      this.value = selected;\r\n      this._cvaOnChange(selected);\r\n      this._onTouched();\r\n      this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n      this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n    });\r\n  }\r\n  _picker: NgxMatColorPickerComponent;\r\n\r\n  /** Whether the colorpicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean { return !!this._disabled; }\r\n  set disabled(value: boolean) {\r\n    const newValue = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this._disabledChange.emit(newValue);\r\n    }\r\n\r\n    // We need to null check the `blur` method, because it's undefined during SSR.\r\n    if (newValue && element.blur) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      element.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): Color | null { return this._value; }\r\n  set value(value: Color | null) {\r\n    const oldValue = this.value;\r\n    this._value = value;\r\n    this._formatValue(value);\r\n\r\n    if (!this._adapter.sameColor(oldValue, value)) {\r\n      this._valueChange.emit(value);\r\n    }\r\n\r\n  }\r\n  private _value: Color | null;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly colorChange: EventEmitter<NgxMatColorPickerInputEvent> =\r\n    new EventEmitter<NgxMatColorPickerInputEvent>();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly colorInput: EventEmitter<NgxMatColorPickerInputEvent> =\r\n    new EventEmitter<NgxMatColorPickerInputEvent>();\r\n\r\n  /** Emits when the disabled state has changed */\r\n  _disabledChange = new EventEmitter<boolean>();\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<Color>();\r\n\r\n  _onTouched = () => { };\r\n\r\n  private _cvaOnChange: (value: any) => void = () => { };\r\n\r\n  private _validatorOnChange = () => { };\r\n\r\n  private _pickerSubscription = Subscription.EMPTY;\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn | null =\r\n    Validators.compose([]);\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  private _lastValueValid = false;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLInputElement>,\r\n    @Optional() private _formField: MatFormField,\r\n    @Optional() @Inject(MAT_COLOR_FORMATS) private _colorFormats: MatColorFormats,\r\n    private _adapter: ColorAdapter) {\r\n    if (!this._colorFormats) {\r\n      throw createMissingDateImplError('MAT_COLOR_FORMATS');\r\n    }\r\n  }\r\n\r\n  /** Returns the palette used by the input's form field, if any. */\r\n  public getThemePalette(): ThemePalette {\r\n    return this._formField ? this._formField.color : undefined;\r\n  }\r\n\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this.getConnectedOverlayOrigin();\r\n  }\r\n\r\n  /**\r\n  * Gets the element that the colorpicker popup should be connected to.\r\n  * @return The element to connect the popup to.\r\n  */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._pickerSubscription.unsubscribe();\r\n    this._valueChange.complete();\r\n    this._disabledChange.complete();\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: Color): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onChange() {\r\n    this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n\r\n    if (this._picker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n      this._picker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  private _formatValue(value: Color | null) {\r\n    this._elementRef.nativeElement.value = value ? this._adapter.format(value, this._colorFormats.display.colorInput) : '';\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    const lastValueWasValid = this._lastValueValid;\r\n    const nextValue = this._adapter.parse(value);\r\n\r\n    if (!this._adapter.sameColor(nextValue, this._value)) {\r\n      this._value = nextValue;\r\n      this._cvaOnChange(nextValue);\r\n      this._valueChange.emit(nextValue);\r\n      this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n    } else if (lastValueWasValid !== this._lastValueValid) {\r\n      this._validatorOnChange();\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","import {\r\n  AfterContentInit, ChangeDetectorRef, Component, ContentChild, Directive, Input, OnChanges, OnDestroy,\r\n  OnInit, SimpleChanges, ViewChild, ViewEncapsulation\r\n} from '@angular/core';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { Subscription, merge, of } from 'rxjs';\r\nimport { NgxMatColorPickerComponent } from '../color-picker/color-picker.component';\r\n\r\n@Directive({\n    selector: '[ngxMatColorpickerToggleIcon]',\n    standalone: false\n})\r\nexport class NgxMatColorpickerToggleIcon { }\r\n\r\n@Component({\n    selector: 'ngx-mat-color-toggle',\n    templateUrl: './color-toggle.component.html',\n    styleUrls: ['./color-toggle.component.scss'],\n    host: {\n        'class': 'ngx-mat-color-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.ngx-mat-color-toggle-active]': 'picker && picker.opened',\n        '[class.mat-accent]': 'picker && picker.color === \"accent\"',\n        '[class.mat-warn]': 'picker && picker.color === \"warn\"',\n        '(focus)': '_button.focus()',\n    },\n    exportAs: 'ngxMatColorPickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    standalone: false\n})\r\nexport class NgxMatColorToggleComponent implements OnInit, AfterContentInit, OnChanges, OnDestroy {\r\n\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  @Input('for') picker: NgxMatColorPickerComponent;\r\n  @Input() tabIndex: number;\r\n\r\n  @Input() get disabled(): boolean {\r\n    if (this._disabled == null && this.picker) {\r\n      return this.picker.disabled;\r\n    }\r\n  }\r\n  set disabled(value: boolean) {\r\n    this._disabled = value;\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Whether ripples on the toggle should be disabled. */\r\n  @Input() disableRipple: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(NgxMatColorpickerToggleIcon) _customIcon: NgxMatColorpickerToggleIcon;\r\n\r\n  @ViewChild('button') _button: MatButton;\r\n\r\n  constructor(private _cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['picker']) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  public open(event: Event): void {\r\n    if (this.picker && !this.disabled) {\r\n      this.picker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const disabled$ = this.picker ? this.picker._disabledChange : of();\r\n    const inputDisabled$ = this.picker && this.picker._pickerInput ?\r\n      this.picker._pickerInput._disabledChange : of();\r\n\r\n    const pickerToggled$ = this.picker ?\r\n      merge(this.picker.openedStream, this.picker.closedStream) : of();\r\n    this._stateChanges.unsubscribe();\r\n\r\n    this._stateChanges = merge(disabled$, inputDisabled$, pickerToggled$).subscribe(() => this._cd.markForCheck());\r\n  }\r\n\r\n}\r\n","<button #button mat-icon-button type=\"button\" [attr.aria-haspopup]=\"picker ? 'dialog' : null\"\r\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\" [disabled]=\"disabled\" (click)=\"open($event)\"\r\n  [disableRipple]=\"disableRipple\">\r\n\r\n  <mat-icon *ngIf=\"!_customIcon\" [style.color]=\"picker?._selected?.rgba\">\r\n    palette\r\n  </mat-icon>\r\n\r\n  <ng-content select=\"[ngxMatColorpickerToggleIcon]\"></ng-content>\r\n\r\n</button>","import { PortalModule } from \"@angular/cdk/portal\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport {\r\n  NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  NgxMatColorCanvasComponent,\r\n  NgxMatColorCollectionComponent,\r\n  NgxMatColorPaletteComponent,\r\n  NgxMatColorPickerComponent,\r\n  NgxMatColorPickerContentComponent,\r\n  NgxMatColorPickerInput,\r\n  NgxMatColorSliderComponent,\r\n  NgxMatColorToggleComponent,\r\n  NgxMatColorpickerToggleIcon,\r\n} from \"./components\";\r\nimport { NumericColorInputDirective } from \"./directives\";\r\nimport { ColorAdapter } from \"./services\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxMatColorPaletteComponent,\r\n    NgxMatColorCanvasComponent,\r\n    NgxMatColorCollectionComponent,\r\n    NgxMatColorSliderComponent,\r\n    NumericColorInputDirective,\r\n    NgxMatColorPickerContentComponent,\r\n    NgxMatColorPickerComponent,\r\n    NgxMatColorToggleComponent,\r\n    NgxMatColorpickerToggleIcon,\r\n    NgxMatColorPickerInput,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatRadioModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatDialogModule,\r\n    PortalModule,\r\n    MatIconModule,\r\n  ],\r\n  exports: [\r\n    NgxMatColorToggleComponent,\r\n    NgxMatColorPickerInput,\r\n    NgxMatColorPickerComponent,\r\n    NgxMatColorpickerToggleIcon,\r\n  ],\r\n\r\n  providers: [\r\n    ColorAdapter,\r\n    NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  ],\r\n})\r\nexport class NgxMatColorPickerModule {}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { AbstractControl, FormControl, Validators } from \"@angular/forms\";\r\nimport { ThemePalette } from \"@angular/material/core\";\r\nimport { Color } from \"projects/color-picker-v2/src/public-api\";\r\n\r\n@Component({\r\n  selector: \"ngx-mat-demo-colorpicker\",\r\n  templateUrl: \"./demo-colorpicker.component.html\",\r\n  styleUrls: [\"./demo-colorpicker.component.scss\"],\r\n  standalone: false,\r\n})\r\nexport class DemoColorpickerComponent implements OnInit {\r\n  public disabled = false;\r\n  public color: ThemePalette = \"primary\";\r\n  public touchUi = false;\r\n\r\n  colorCtr: AbstractControl = new FormControl(new Color(0, 255, 255), [\r\n    Validators.required,\r\n  ]);\r\n\r\n  public options = [\r\n    { value: true, label: \"True\" },\r\n    { value: false, label: \"False\" },\r\n  ];\r\n\r\n  public listColors = [\"primary\", \"accent\", \"warn\"];\r\n\r\n  public code3 = `<mat-form-field>\r\n  <input matInput [ngxMatColorPicker]=\"picker\" [formControl]=\"colorCtr\" [disabled]=\"disabled\">\r\n  <ngx-mat-color-toggle matSuffix [for]=\"picker\"></ngx-mat-color-toggle>\r\n  <ngx-mat-color-picker #picker [touchUi]=\"touchUi\" [color]=\"color\"></ngx-mat-color-picker>\r\n</mat-form-field>`;\r\n\r\n  public code6 = `\r\nimport { Color } from '@angular-material-components/color-picker';\r\ncolorCtr: AbstractControl = new FormControl(new Color(255, 243, 0), [Validators.required]);`;\r\n\r\n  public code1 = \"npm install --save @angular-material-components/color-picker\";\r\n\r\n  public code2 = `import { MAT_COLOR_FORMATS, NgxMatColorPickerModule, NGX_MAT_COLOR_FORMATS } \r\n  from '@angular-material-components/color-picker'\r\n\r\n  @NgModule({\r\n    ...\r\n    imports: [\r\n         ...\r\n         NgxMatColorPickerModule\r\n    ],\r\n    providers: [\r\n     { provide: MAT_COLOR_FORMATS, useValue: NGX_MAT_COLOR_FORMATS }\r\n    ],\r\n    ...\r\n })\r\n export class AppModule { }`;\r\n\r\n  public code4 = `export const CUSTOM_MAT_COLOR_FORMATS: MatColorFormats = {\r\n    display: {\r\n        colorInput: 'hex'\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    ...\r\n    providers: [\r\n      { provide: MAT_COLOR_FORMATS, useValue: CUSTOM_MAT_COLOR_FORMATS }\r\n    ],\r\n    ...\r\n  })\r\nexport class AppModule { }`;\r\n\r\n  public code5 =\r\n    '<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons&display=block\" rel=\"stylesheet\">';\r\n\r\n  public code7 = `<mat-form-field>\r\n  <input matInput [ngxMatColorPicker]=\"pickerCustomIcon\" [formControl]=\"colorCtr\" [disabled]=\"disabled\">\r\n  <ngx-mat-color-toggle matSuffix [for]=\"pickerCustomIcon\">\r\n    <mat-icon ngxMatColorpickerToggleIcon>keyboard_arrow_down</mat-icon>\r\n  </ngx-mat-color-toggle>\r\n  <ngx-mat-color-picker #pickerCustomIcon [touchUi]=\"touchUi\" [color]=\"color\"></ngx-mat-color-picker>\r\n</mat-form-field>`;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  onDisabledChanged(value: boolean) {\r\n    if (!value) {\r\n      this.colorCtr.enable();\r\n    } else {\r\n      this.colorCtr.disable();\r\n    }\r\n  }\r\n}\r\n","<mat-tab-group [mat-stretch-tabs]=\"false\">\r\n  <mat-tab label=\"API\">\r\n    <h1>API reference for &#64;angular-material-components/color-picker</h1>\r\n    <h2>Getting started</h2>\r\n\r\n    <a\r\n      href=\"https://www.npmjs.com/package/@angular-material-components/color-picker\"\r\n      target=\"_blank\"\r\n    >\r\n      <img\r\n        src=\"https://badge.fury.io/js/%40angular-material-components%2Fcolor-picker.svg\"\r\n      />\r\n    </a>\r\n\r\n    <pre><code ngxMatHighlight>{{code1}}</code></pre>\r\n\r\n    <h2>Setup</h2>\r\n    <pre><code ngxMatHighlight class=\"language-typescript\">{{code2}}</code></pre>\r\n\r\n    <h2>Properties &#64;Input</h2>\r\n    <table class=\"api-table-properties\">\r\n      <tbody>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Type</th>\r\n          <th>Default value</th>\r\n          <th>Description</th>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>\r\n            <div>disabled</div>\r\n          </td>\r\n          <td>boolean</td>\r\n          <td>null</td>\r\n          <td>\r\n            <p>If true, the picker is readonly and can't be modified</p>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>\r\n            <div>touchUi</div>\r\n          </td>\r\n          <td>boolean</td>\r\n          <td>false</td>\r\n          <td>\r\n            <p>\r\n              Whether the calendar UI is in touch mode. In touch mode the\r\n              calendar opens in a dialog rather than a popup and elements have\r\n              more padding to allow for bigger touch targets.\r\n            </p>\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <td>\r\n            <div>color</div>\r\n          </td>\r\n          <td>ThemePalette</td>\r\n          <td>undefined</td>\r\n          <td>\r\n            <p>Color palette to use on the color picker</p>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <h2>Choosing color format settings to display in input</h2>\r\n\r\n    <p>\r\n      The color-picker use <strong>NGX_MAT_COLOR_FORMATS</strong> by default.\r\n    </p>\r\n\r\n    <p>\r\n      You can also customize the color format by providing your custom\r\n      MAT_COLOR_FORMATS in your module.\r\n    </p>\r\n    For example:\r\n    <pre><code ngxMatHighlight class=\"language-typescript\">{{code4}}</code></pre>\r\n\r\n    <h2>Theming</h2>\r\n    <p>\r\n      &#64;see &#64;angular/material\r\n      <a\r\n        href=\"https://material.angular.io/guide/theming#using-a-pre-built-theme\"\r\n        >Using a pre-built theme</a\r\n      >\r\n    </p>\r\n    <p>Add the Material Design icon font to your index.html</p>\r\n    <pre><code ngxMatHighlight class=\"language-css\">{{code5}}</code></pre>\r\n  </mat-tab>\r\n  <mat-tab label=\"Example\">\r\n    <mat-card class=\"zone zone-value\">\r\n      <mat-card-content>\r\n        <div class=\"row\" [style.background-color]=\"colorCtr.value?.rgba\">\r\n          HEX: {{ colorCtr.value?.hex }}\r\n        </div>\r\n        <div class=\"row\">RGBA: {{ colorCtr.value?.rgba }}</div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"zone zone-picker\">\r\n      <mat-card-content>\r\n        <mat-form-field>\r\n          <input\r\n            matInput\r\n            [ngxMatColorPicker]=\"picker\"\r\n            [formControl]=\"colorCtr\"\r\n            [disabled]=\"disabled\"\r\n          />\r\n          <ngx-mat-color-toggle matSuffix [for]=\"picker\"></ngx-mat-color-toggle>\r\n          <ngx-mat-color-picker\r\n            #picker\r\n            [touchUi]=\"touchUi\"\r\n            [color]=\"color\"\r\n          ></ngx-mat-color-picker>\r\n        </mat-form-field>\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"zone zone-config\">\r\n      <div class=\"config-wrapper\">\r\n        <span class=\"label\">disabled (Default: false) </span>\r\n        <mat-radio-group\r\n          aria-label=\"Select an option\"\r\n          [color]=\"color\"\r\n          [ngModel]=\"disabled\"\r\n          (ngModelChange)=\"onDisabledChanged($event)\"\r\n        >\r\n          <mat-radio-button\r\n            class=\"example-radio-button\"\r\n            *ngFor=\"let option of options\"\r\n            [value]=\"option.value\"\r\n          >\r\n            {{ option.label }}</mat-radio-button\r\n          >\r\n        </mat-radio-group>\r\n      </div>\r\n\r\n      <div class=\"config-wrapper\">\r\n        <span class=\"label\">touchUi (Default: false) </span>\r\n        <mat-radio-group\r\n          aria-label=\"Select an option\"\r\n          [(ngModel)]=\"touchUi\"\r\n          [color]=\"color\"\r\n        >\r\n          <mat-radio-button\r\n            class=\"example-radio-button\"\r\n            *ngFor=\"let option of options\"\r\n            [value]=\"option.value\"\r\n          >\r\n            {{ option.label }}</mat-radio-button\r\n          >\r\n        </mat-radio-group>\r\n      </div>\r\n\r\n      <div class=\"config-wrapper\">\r\n        <span class=\"label\">color (Default: primary) </span>\r\n        <mat-form-field [color]=\"color\">\r\n          <mat-label>Select color</mat-label>\r\n          <mat-select [(ngModel)]=\"color\">\r\n            <mat-option *ngFor=\"let item of listColors\" [value]=\"item\">\r\n              {{ item }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n      </div>\r\n    </mat-card>\r\n\r\n    <pre><code ngxMatHighlight class=\"language-typescript\">{{code6}}</code></pre>\r\n    <pre><code ngxMatHighlight class=\"html\">{{code3}}</code></pre>\r\n\r\n    <h2>Color picker with custom icon</h2>\r\n    <pre><code ngxMatHighlight class=\"language-html\">{{code7}}</code></pre>\r\n\r\n    <mat-card class=\"zone zone-picker\">\r\n      <mat-card-content>\r\n        <mat-form-field>\r\n          <input\r\n            matInput\r\n            [ngxMatColorPicker]=\"pickerCustomIcon\"\r\n            [formControl]=\"colorCtr\"\r\n            [disabled]=\"disabled\"\r\n          />\r\n          <ngx-mat-color-toggle matSuffix [for]=\"pickerCustomIcon\">\r\n            <mat-icon ngxMatColorpickerToggleIcon>keyboard_arrow_down</mat-icon>\r\n          </ngx-mat-color-toggle>\r\n          <ngx-mat-color-picker\r\n            #pickerCustomIcon\r\n            [touchUi]=\"touchUi\"\r\n            [color]=\"color\"\r\n          ></ngx-mat-color-picker>\r\n        </mat-form-field>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { MatRadioModule } from \"@angular/material/radio\";\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport {\r\n  MAT_COLOR_FORMATS,\r\n  MatColorFormats,\r\n  NgxMatColorPickerModule,\r\n} from \"../../../projects/color-picker-v2/src/public-api\";\r\nimport { SharedModule } from \"../shared\";\r\nimport { DemoColorpickerComponent } from \"./demo-colorpicker.component\";\r\n\r\nconst routes: Routes = [{ path: \"\", component: DemoColorpickerComponent }];\r\n\r\n//'rgb' | 'hex' | 'hex6' | 'hex3' | 'hex4' | 'hex8'\r\nconst CUSTOM_MAT_COLOR_FORMATS: MatColorFormats = {\r\n  display: {\r\n    colorInput: \"hex8\",\r\n  },\r\n};\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    NgxMatColorPickerModule,\r\n    MatCardModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    SharedModule,\r\n  ],\r\n  providers: [\r\n    { provide: MAT_COLOR_FORMATS, useValue: CUSTOM_MAT_COLOR_FORMATS },\r\n  ],\r\n  declarations: [DemoColorpickerComponent],\r\n})\r\nexport class DemoColorpickerModule {}\r\n"],"mappings":"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","names":["_a","_a","MatDialogState","_a","_b","_b","_a"],"x_google_ignoreList":[0,1]}